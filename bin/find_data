#!/usr/bin/env python

"""Just a thin wrapper over gw_data_find module to get specific sets of data for a given gracedb ID"""

import sys
import os
import argparse
import tempfile

# FIXME: import from glue
#from glue import GWDataFindClient
import GWDataFindClient
from glue.lal import Cache

from ligo.gracedb.rest import GraceDb
# initialize gracedb interface
gracedb = GraceDb()

SUPPORTED_DATA_TYPES = ["file", "gsiftp"]

optp = argparse.ArgumentParser()
optp.add_argument("-d", "--data-location", default="gsiftp", help="Data location type. Default is gsiftp. Also supported is localhost.")
optp.add_argument("-p", "--padding", default=0, type=float, help="How much time around the event to include in cache.")
optp.add_argument("-g", "--graceid", help="Unique ID of event to which output will be submitted.")
optp.add_argument("-f", "--frame-type", action="append", help="Frame type to query. Multiple instances of this option will append to the list. Specify in form of instrument=frame_type, e.g. H1=H1_ER_C00_L1.")
optp.add_argument("-s", "--datafind-server", help="Query this datafind server.")
optp.add_argument("-v", "--verbose", action="store_true", help="Be verbose.")

opts = optp.parse_args()

#
# Do some option checking
#
if opts.data_location not in SUPPORTED_DATA_TYPES:
	sys.exit("%s is not a valid location protocol." % opts.data_location)

if opts.graceid is None:
	sys.exit("Valid graceid not specified.")

if opts.frame_type is None:
	sys.exit("Frame type must be specified.")
else:
	ftype_dict = dict([s.split("=") for s in opts.frame_type])

#
# Query the server
# Shamelessly stolen from gw_data_find
#

if opts.verbose:
	print "Frame types are %s" % str(opts.frame_type)

sp = opts.datafind_server.split(":")
if len(sp) == 1:
	server, port = sp[0], "80"
elif len(sp) == 2:
	server, port = sp
else:
	sys.exit("Invalid datafind server specification.")

if opts.verbose:
	print "Querying LDR server for data location."
	print "Server is %s:%s" % (server, port)

cert_file, key_file = GWDataFindClient.find_credential()
if opts.verbose:
	print "Found certificate:\n\t%s\nand keyfile:\n\t%s" % (cert_file, key_file)
connection = GWDataFindClient.GWDataFindHTTPSConnection(host=server, port=int(port), cert_file=cert_file, key_file=key_file)
"""
try:
	connection.ping()
except RuntimeError:
	sys.exit("Pinging %s failed." % opts.datafind_server)
"""

#
# Parse out event time
#
result = list(gracedb.events(opts.graceid))[0]
gps_time = result['gpstime']
begin, end = gps_time - opts.padding, gps_time + opts.padding

#
# Parse out instruments
#
instruments = result['instruments']

#
# Get data cache
#
cache = Cache()
for inst in instruments.split(","):
	if not ftype_dict.has_key(inst):
		sys.exit("Event has instrument %s, but no frame type for that instrument was found." % inst)
	ftype = ftype_dict[inst]
	clen = len(cache)
	cache.extend( connection.find_frame_urls(inst[0], ftype, begin, end, urltype=opts.data_location, on_gaps="warn") )
	print "Found %d files for %s" % (len(cache)-clen, inst)

#
# upload cache
#
tmpfname = tempfile.gettempdir() + "/%s_data.cache" % opts.graceid
if opts.verbose:
	print "Placing results in %s" % tmpfname
tmpf = open(tmpfname, "w")
cache.tofile(tmpf)
gracedb.writeLog(opts.graceid, message="Frame data location", filename=tmpfname)
tmpf.close()

#
# Victory is ours!
#
connection.close()
sys.exit()
