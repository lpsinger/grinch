#!/usr/bin/env python
from glue.ligolw import ligolw
from glue.ligolw import table
from glue.ligolw import lsctables
from glue.ligolw import utils as ligolw_utils

import subprocess as sp

# Figure out where we're writing segment files locally
if config.has_option('general', 'output-dir'):
	output_dir = config.get('general', 'output-dir')
	if not os.path.exists(output_dir):
		os.makedirs( output_dir )
else:
	output_dir = '.'

# Find which segDB we're using
if config.has_option('general', 'segdb-url'):
	segdb_url = config.get('general', 'segdb-url')
else:
	segdb_url = 'https://segments.ligo.org'

# Iterate through flags, uploading each to GraceDB in turn
flags = config.get( 'general', 'flags' ).split()
flags.sort( key=lambda l: config.getfloat(l,'wait')+config.getfloat(l,'look_right') ) # sort by how soon we can launch query

for flag in flags:
	start = int(event_time-config.getfloat(flag, 'look_left'))
	end = event_time+config.getfloat(flag, 'look_right')
	if end%1:
		end = int(end) + 1
	else:
		end = int(end)
	dur = end-start

	# set environment for this query
	dmt = config.has_option(flag, 'dmt')
	if dmt:
		os.environ['ONLINEDQ'] = config.get(flag, 'dmt')

	wait = end + config.getfloat(flag, 'wait') - lal_gpstime.gps_time_now() # wait until we're past the end time
	if wait > 0:
		time.sleep( wait )

	outfilename = flag2filename( flag, start, dur, output_dir)
	cmd = segDBcmd( segdb_url, flag, start, end, outfilename, dmt=dmt )
	sp.Popen( cmd.split() ).wait()

	tags = config.get(flag, 'tags').split()

	# process segments
	xmldoc = ligolw_utils.load_filename(outfilename, contenthandler=lsctables.use_in(ligolw.LIGOLWContentHandler))

	sdef = table.get_table(xmldoc, lsctables.SegmentDefTable.tableName)
	ssum = table.get_table(xmldoc, lsctables.SegmentSumTable.tableName)
	seg = table.get_table(xmldoc, lsctables.SegmentTable.tableName)

        # get segdef_id
#        segdef_id = next(a.segment_def_id for a in sdef if a.name==flag.split(":")[1])
	segdef_id = next(a.segment_def_id for a in sdef if a.name=='RESULT')

	message = '{0}'.format(flag)

        # define the fraction of the time this flag is defined
        # get list of defined times
	defd = 0.0
	for a in ssum:
		if a.segment_def_id==segdef_id:
			defd += a.end_time + 1e-9*a.end_time_ns - a.start_time + 1e-9*a.start_time_ns        
	message += ' defined : {0:.3f}/{1}={2:.3f}{3}'.format(defd, dur, defd/dur * 100, '%')

        # define the fraction of the time this flag is active?
        # get list of  segments
	actv = 0.0
	for a in seg:
		if a.segment_def_id==segdef_id:
			actv += a.end_time + 1e-9*a.end_time_ns - a.start_time + 1e-9*a.start_time_ns
	message += ', active : {0:.3f}/{1}={2:.3f}{3}'.format(actv, dur, actv/dur * 100, '%')
	overflow_dict[flag] = actv/dur
	g.writeLog( graceid, message, tagname=tags )

