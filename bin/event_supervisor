#!/usr/bin/python

usage = "event_supervisor [--options] config.ini"
description = \
"""
launched for each new lvalert message, this script will exit if alert_type!="new".
It then determines a schedule of checks that need to be performed (specified in config.ini) and sets about monitoring the GraceDB event.
If everything is kosher, we exit gracefully. Otherwise, we send emails to the people specified in the config file.
"""

#=================================================

import os
import sys
import traceback

import time
import ConfigParser
import json
from ligo.gracedb.rest import GraceDb

from grinch import supervisor_checks as checks
report = checks.report
errReport = checks.errReport 

from optparse import OptionParser

#=================================================

parser = OptionParser(usage=usage, description=description)

parser.add_option('-v', '--verbose', default=False, action="store_true")

parser.add_option('-g', '--graceid', default=False, type="string", help="a graceid for which we perform the scheduled checks. If not supplied, we parse this information from an lvalert assumed to be in STDIN")
parser.add_option('-G', '--gracedb_url', default=None, type="string")

parser.add_option('-i', '--ignore-INJ', default=False, action="store_true", help="if supplied, we check for the \"INJ\" label before each check and exit if it is present.")

parser.add_option('-a', '--annotate-gracedb', default=False, action="store_true", help="write log messages describing checks into GraceDb")

parser.add_option('-n', '--no-email', default=False, action="store_true", help="do not send emails if alerts require action. Useful for debugging")

parser.add_option('-t', '--tagname', default=['event_supervisor'], action='append', type='string', help='tags applied to GraceDB messages')

opts, args = parser.parse_args()

if len(args)!=1:
    raise ValueError("please supply exactly one config.ini file as an argument")
configfile = args[0]

#=================================================

if opts.graceid: ### user defines the graceid, no need to reference an lvaler
    gdb_id = opts.graceid
    if opts.verbose:
        report( "processing event : %s"%gdb_id )

else: ### parse the alert to determine gdb_id
    ### parse the alert
    alert_message = sys.stdin.read()
    if opts.verbose:
        report( "alert received :" )
        report( alert_message )

    alert = json.loads(alert_message)
    if alert["alert_type"] != "new":
        if opts.verbose:
            report( "alert_type!=\"new\", skipping" )
        sys.exit(0) ### not a new alert

    gdb_id = alert['uid']
    if opts.verbose:
        report( "New event detectected : %s"%gdb_id )

### set up the connection to gracedb
if opts.gracedb_url:
    if opts.verbose:
        report( "conecting to GraceDb : %s"%(opts.gracedb_url) )
    gracedb = GraceDb( opts.gracedb_url )
else:
    if opts.verbose:
        report( "connecting to GraceDb" )
    gracedb = GraceDb()

try:
    gdb_entry = json.loads(gracedb.event(gdb_id).read())
except:
    import traceback
    traceback.print_exc()
    sys.exit(1)

### get parameters about event type from gracedb
group = gdb_entry['group']
pipeline = gdb_entry['pipeline']
if gdb_entry.has_key('search'):
    search = gdb_entry['search']
    event_type = "%s_%s_%s"%(group, pipeline, search)
else:
    search = None
    event_type = "%s_%s"%(group, pipeline)

event_type = event_type.lower() ### cast to all lower case to match config file sections
if opts.verbose:
    report( "\tevent_type : %s"%(event_type) )

#=================================================

### read in the config file
if opts.verbose:
    report( "reading config from : %s and setting up schedule of checks"%(configfile) )
config = ConfigParser.SafeConfigParser()
config.read(configfile)

### set up the schedule of checks
kwargs = {'verbose':opts.verbose}
if gdb_entry['extra_attributes'].has_key('MultiBurst'): ### HARD CODED FOR CWB EVENTS!
    kwargs.update( {'freq': gdb_entry['extra_attributes']['MultiBurst']['central_freq']} )
schedule = checks.config_to_schedule( config, event_type, **kwargs )

### annotate gracedb with list of scheduled checks
if opts.annotate_gracedb:
    log = "event_supervisor scheduled to check: %s"%(", ".join([description for dt, foo, kwargs, email, description in schedule]))
    gracedb.writeLog( gdb_id, log, tagname=opts.tagname )

### perform the scheduled checks
if opts.verbose:
    report( "performing schedule" )
#to = time.time() ### start time of our checking proceedures
to = time.mktime(time.strptime(gdb_entry['created'], '%Y-%m-%d %H:%M:%S %Z')) ### parse creation time from GraceDB

event_url = "%s/events/view/%s"%(gracedb.service_url[:-4], gdb_id)

### wait for a few seconds to give the first injection label a chance to be applied (only if opts.ingore_INJ)
if opts.ignore_INJ:
    ignoreINJ_delay = config.getfloat('general', 'ignoreINJ_delay')
    if opts.verbose:
        report( "waiting for %.3f seconds to allow INJ labels to be applied"%ignoreINJ_delay )
    time.sleep( ignoreINJ_delay ) 

for dt, foo, kwargs, email, description in schedule:
    ### check current time stamp
    wait = dt - (time.mktime(time.gmtime())-to) ### we go through gmtime() and mktime() because time.time() was producing weird results
    if wait > 0:
        if opts.verbose:
            report( "waiting %.3f seconds before performing : %s"%(wait, description) )
            sys.stdout.flush()
            sys.stderr.flush()
        time.sleep( wait )

    ### see if we should skip this event
    if opts.ignore_INJ:
        try:
            if checks.isINJ( gracedb, gdb_id, verbose=opts.verbose ):
                if opts.annotate_gracedb:
                    log = "event_supervisor ignoring this event because it is labeled \"INJ\" and cancelling checks : %s"
                    cancelled_checks = []
                    append = False
                    for _, _, _, _, d in schedule:
                        if d == description:
                            append = True
                        if append:
                            cancelled_checks.append( d )
                    log = log%(", ".join(cancelled_checks))
                    gracedb.writeLog( gdb_id, log, tagname=opts.tagname )
                if opts.verbose:
                    report( log )
                    report( "ignoring %s"%(gdb_id) )
                break ### if it is labeled INJ, we ignore the event by exiting
        except Exception as e:
            report( "INJ check failed" )
            errReport( "INJ check failed\n%s"%(tracedback.format_exc()) )

    ### try to perform the scheduled check
    try:
        action_required = foo( gracedb, gdb_id, **kwargs ) ### perform this check. (foo -> True) means the check failed!
        if action_required: ### perform this check. (foo -> True) means the check failed!
            if opts.no_email:
                if opts.verbose:
                    report( "\tevent_supervisor checked : %s. Action required! no email sent"%(description) )
            elif email:
                os.system( "echo \"action required for GraceDB event : %s (%s)\n%s\" | mail -s \"action required for GraceDB event : %s (%s)\" %s"%(event_url, event_type, description, gdb_id, event_type, " ".join(email)) )
                if opts.annotate_gracedb:
                    log = "event_supervisor checked : %s. Action required! email sent to %s"%(description, ", ".join(email))
                    gracedb.writeLog( gdb_id, log, tagname=opts.tagname )
                if opts.verbose:
                    report( "\tevent_supervisor checked : %s. Action required! email sent to %s"%(description, ", ".join(email)) )
            else:
                report( "WARNING: check requires action but no email recipients specified! No warning messages will be sent!" )
                if opts.annotate_gracedb:
                    log = "event_supervisor checked : %s. Action required! but no email specified"%(description)
                    gracedb.writeLog( gdb_id, log, tagname=opts.tagname )
                if opts.verobse:
                    report( "\tevent_supervisor checked : %s. Action required! but no email specified"%(description) )

        elif opts.annotate_gracedb or opts.verbose:
            if opts.annotate_gracedb:
                log = "event_supervisor checked : %s. No action required."%(description)
                gracedb.writeLog( gdb_id, log, tagname=opts.tagname )
            if opts.verbose:
                report( "\tevent_supervisor checked : %s. No action required."%(description) )

    except Exception as e:
        report( "check FAILED : %s -> %s"%(description, type(e)) )
        errReport( "check Failed : %s\n%s"%(description, traceback.format_exc()) )

        if opts.no_email:
            if opts.verbose:
                report( "\tcheck failed : %s. no email sent"%(description) )
        elif email:
            os.system( "echo \"check failed for GraceDB event : %s (%s)\n%s\" | mail -s \"check failed for GraceDB event : %s (%s)\" %s"%(event_url, event_type, description, gdb_id, event_type, " ".join(email)) )
            if opts.annotate_gracedb:
                log = "event_supervisor attempted to check : %s, but FAILED! email sent to %s"%(description, " ".join(email))
                gracedb.writeLog( gdb_id, log, tagname=opts.tagname )
            if opts.verbose:
                report( "\tcheck failed : %s. email sent to %s"%(description, " ".join(email)) )
        else:
            report( "WARNING: check failed but no email recipients specified! No warning message will be sent!" )
            if opts.annotate_gracedb:
                log = "event_supervisor attempted to check : %s, but FAILED! no email specified"%(description)
                gracedb.writeLog( gdb_id, log, tagname=opts.tagname )
            if opts.verbose:
                report( "\tcheck failed : %s. but no email specified"%(description) )

    ### force flushes
    sys.stdout.flush()
    sys.stderr.flush()

if opts.annotate_gracedb:
    log = "event_supervisor completed all scheduled checks"
    gracedb.writeLog( gdb_id, log, tagname=opts.tagname )

if opts.verbose:
    report( "Done" )
