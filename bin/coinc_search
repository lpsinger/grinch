#!/usr/bin/python

"""
Script to execute temporal coincidence search given an external trigger
or gravitational wave candidate event
"""
__author__ = "Alex Urban <alexander.urban@ligo.org>"

import os
import sys
import numpy as np
from optparse import Option, OptionParser


# read in options from command line
opts, args = OptionParser(
    description = __doc__,
    usage = "%prog [options]",
    option_list = [
        Option("-d","--direction",help="flow of coincidence search: external trigger <-> gravitational wave"),
        Option("-g","--graceid",help="graceid of external trigger event"),
        Option("-x","--xml",metavar="FILE.xml",help="VOEvent .xml file of external trigger")
    ]
).parse_args()


###############################
# INITIATE COINCIDENCE SEARCH #
###############################

if opts.direction == 'forward':
    from gracedb_events.exttrig import GRB

    # get info
    try:
        trig = GRB(opts.graceid,opts.xml)
    except:
        print "ERROR: Valid VOEvent .xml not specified"
        sys.exit(1)
    trig.write_fits()

    # inform GraCEDb things are about to go down
    note = 'Initiating coincidence search'
    trig.submit_gracedb_log(note)


    # first, the short-duration search
    coincs = trig.short_search()
    if coincs != []: # produce plots and skymaps if there is a non-null result
        from gracedb_events.grace import GW
        from workflow_helper import directory
        arglist = " -o skymap_with_short_triggers.png --contour 50 --contour 90"
        for i in xrange(len(coincs)):
            trigdir = os.getcwd() + '/'
            trigfits = trigdir + trig.fits # will need the path to this file

            working = directory(coincs[i]['graceid'])
            working.build_and_move() # move to GW event working directory

            event = GW(coincs[i]['graceid']) # initialize object of class GW
#            event.plot_dag(trigfits, trig.RA, trig.dec) # plot and upload skymap with trigger and convolved heatmap
            arglist = arglist + " --radec %s %s" % (trig.RA, trig.dec)

        os.system("/usr/bin/env plot_allsky %s skymap.fits.gz" % arglist)
        os.system("/usr/bin/gracedb --tag-name=sky_loc upload %s skymap_with_short_triggers.png" % coincs[i]['graceid'])
        os.chdir(trigdir)


    # finally, the long-duration search
    coincs2 = trig.long_search()
    if coincs2 != []: # produce plots and skymaps if there is a non-null result
        from gracedb_events.grace import GW
        from workflow_helper import directory
        arglist = " -o skymap_with_long_triggers.png --contour 50 --contour 90"
        for i in xrange(len(coincs2)):
            trigdir = os.getcwd() + '/'
            trigfits = trigdir + trig.fits # will need the path to this file

            working = directory(coincs2[i]['graceid'])
            working.build_and_move() # move to GW event working directory

            event = GW(coincs2[i]['graceid']) # initialize object of class GW
#            event.plot_dag(trigfits, trig.RA, trig.dec) # plot and upload skymap with trigger and convolved heatmap
            arglist = arglist + " --radec %s %s" % (trig.RA, trig.dec)

        os.system("/usr/bin/env plot_allsky %s skymap.fits.gz" % arglist)
        os.system("/usr/bin/gracedb --tag-name=sky_loc upload %s skymap_with_long_triggers.png" % coincs[i]['graceid'])
        os.chdir(trigdir)

    note2 = 'Coincidence search complete'
    trig.submit_gracedb_log(note2)

elif opts.direction == 'backward':
    from gracedb_events.grace import GW

    # get info
    event = GW(opts.graceid)

    # inform GraCEDb things are about to go down
    note = 'Initiating coincidence search'
    event.submit_gracedb_log(note)


    # first, the short-duration search
    coincs = event.short_search()
    if coincs != []: # produce plots and skymaps if there is a non-null result
        from gracedb_events.exttrig import GRB
        from workflow_helper import directory
        arglist = " -o skymap_with_short_triggers.png --contour 50 --contour 90"
        for i in xrange(len(coincs)):
#            working = directory(coincs[i]['graceid'])
#            working.build_and_move() # move to GRB event working directory

            trig = GRB(coincs[i]['graceid'],coincs[i]['file']) # initialize object of class GRB
#            trig.write_fits()
#            trigdir = os.getcwd() + '/'
#            trigfits = trigdir + trig.fits # will need the path to this file

#            directory(opts.graceid).build_and_move()
#            event.plot_dag(trigfits, trig.RA, trig.dec) # plot and upload skymap with trigger and convolved heatmap
            arglist = arglist + " --radec %s %s" % (trig.RA, trig.dec)

        os.system("/usr/bin/env plot_allsky %s skymap.fits.gz" % arglist)
        os.system("/usr/bin/gracedb --tag-name=sky_loc upload %s skymap_with_short_triggers.png" % opts.graceid)

    # then, the long-duration search
    coincs2 = event.long_search()
    if coincs2 != []: # produce plots and skymaps if there is a non-null result
        from gracedb_events.exttrig import GRB
        from workflow_helper import directory
        arglist = " -o skymap_with_long_triggers.png --contour 50 --contour 90"
        for i in xrange(len(coincs2)):
#            working = directory(coincs2[i]['graceid'])
#            working.build_and_move() # move to GRB event working directory

            trig = GRB(coincs2[i]['graceid'],coincs[i]['file']) # initialize object of class GRB
#            trig.write_fits()
#            trigdir = os.getcwd() + '/'
#            trigfits = trigdir + trig.fits # will need the path to this file

#            directory(opts.graceid).build_and_move()
#            event.plot_dag(trigfits, trig.RA, trig.dec) # plot and upload skymap with trigger and convolved heatmap
            arglist = arglist + " --radec %s %s" % (trig.RA, trig.dec)

        os.system("/usr/bin/env plot_allsky %s skymap.fits.gz" % arglist)
        os.system("/usr/bin/gracedb --tag-name=sky_loc upload %s skymap_with_long_triggers.png" % opts.graceid)

    # finally, the hardware injection search
    coincs3 = event.hardware_search()
    if coincs3 != []: # produce plots and skymaps if there is a non-null result
        from glue.ligolw import table, lsctables, utils
        arglist = " -o skymap_with_unblind_injections.png --contour 50 --contour 90"
        for i in xrange(len(coincs3)):
            tablename = coincs3[i]['file']
            os.system("/usr/bin/gracedb download %s %s" % (coincs3[i]['graceid'], tablename))
            sim_inspiral_table = table.get_table(utils.load_filename(tablename), lsctables.SimInspiralTable.tableName)
            RA, dec = np.rad2deg((sim_inspiral_table[0].longitude, sim_inspiral_table[0].latitude))
            arglist = arglist + " --radec %s %s" % (RA, dec)

        os.system("/usr/bin/env plot_allsky %s skymap.fits.gz" % arglist)
        os.system("/usr/bin/gracedb --tag-name=sky_loc upload %s skymap_with_unblind_injections.png" % opts.graceid)

    note2 = 'Coincidence search complete'
    event.submit_gracedb_log(note2)

else:
    print "ERROR: Valid direction argument not specified"
    sys.exit(1)
