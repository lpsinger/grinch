#!/usr/bin/python

"""
Script to manage starting, stopping, and monitoring of the 
LV alert listening process an related tasks on gdb_processor
"""
__author__ = "Alex Urban <alexander.urban@ligo.org>, Reed Essick <reed.essick@ligo.org>"

import argparse
import os

from sys import exit

# define and parse command-line arguments
parser = argparse.ArgumentParser(description='Manage the event_supervisor lvalert_listen workflow.')
parser.add_argument('command', choices=['start', 'status', 'stop'],
		help='start, stop or status of gdb_processor tasks')
args = parser.parse_args()

# store the name of the home directory as a global variable
home = os.getenv("HOME")

# switch to the working directory
try: 
	os.chdir(home+'/working')
except OSError:
	os.mkdir(home+'/working')
	os.mkdir(home+'/working/log')
	os.chdir(home+'/working')
	pass

# if run with argument 'start,' write and submit condor .sub file 
if args.command == 'start':
	contents = """\
#this is the submit file to condor for lvalert

universe            = local

executable          = %s/opt/bin/lvalert-init_event_supervisor
getenv              = True
notification        = never
environment         = DISPLAY=localhost:10.0
accounting_group = ligo.prod.o1.cbc.grb.raven
accounting_group_user = reed.essick

## add attribute""" % home + r"""
## condor_q -format "%s " Owner -format "%s " ClusterId -format "%s\n" lvalert_listen
+LVAlertListen      = "gdb_processor lvalert_listen"

log                 = log/lvalertlisten_event_supervisor.$(Cluster).log 
output              = log/lvalertlisten_event_supervisor.$(Cluster).out
error               = log/lvalertlisten_event_supervisor.$(Cluster).error

Queue
"""
	with open('lvalertlisten_event_supervisor.sub', 'w') as f:
		f.write(contents)
	condorargs = ['condor_submit','lvalertlisten_event_supervisor.sub']
	os.execlp('condor_submit', *condorargs)

# if run with argument 'status', print a short summary of the job to screen
elif args.command == 'status':
	user = os.getenv("USER")
	condorargs = ['condor_q', user]
	os.execlp('condor_q', *condorargs)

# if run with argument 'stop', kill the lvalertlisten job
elif args.command == 'stop':
	exterminate = raw_input('Are you sure?? This will kill all condor jobs for this user... [y/n] ')
	if exterminate == 'y' or exterminate == 'yes': 
		print 'Righty-ho then. Exterminate!'
		user = os.getenv("USER")
		condorargs = ['condor_rm',user]
		os.execlp('condor_rm', *condorargs)
	else:
		print 'I thought as much!'
		exit()
