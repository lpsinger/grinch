#!/usr/bin/env python
import os
import json
from sys import stdin
from ligo.gracedb.rest import GraceDb, HTTPError
import re
import ConfigParser
from lal import gpstime
import operator
import functools

import logging

from grinch.approval_utils import get_farthresh, process_alert, checkSignoffs 
from grinch.approval_utils import checkLabels, checkIdqStatus, getIdqAndJointFapValues

#--------------------------------------------------------------------------------------
# Fetch parameters
#--------------------------------------------------------------------------------------
# Import FAR threshold, iDQ threshold from config file
config = ConfigParser.SafeConfigParser()
config.read('approval_processor_config.ini')
idqthresh = config.getfloat('default', 'idqthresh')
idq_pipelines = config.get('default', 'idq_pipelines')
idq_pipelines = idq_pipelines.replace(' ','') # remove any spaces
idq_pipelines = idq_pipelines.split(',') # a list of iDQ pipelines
hardware_inj = config.get('default', 'hardware_inj')
humanscimons = config.get('default', 'humanscimons')

# Set up logging
logger = logging.getLogger('approval_processor')
logging_filehandler = logging.FileHandler(config.get('default', 'approval_processor_logfile'))
logging_filehandler.setLevel(logging.INFO)
logger.setLevel(logging.INFO)
logger.addHandler(logging_filehandler)

# A common set of tasks related to human signoffs
def passesHumanSignoffsOrExit(client, logger, graceid, detectors):
    signoffResult = checkSignoffs(client, logger, graceid, detectors)
    if signoffResult=='Fail':
        msg = 'Finished running human signoff checks. Candidate event failed human signoff checks.'
        r = client.writeLog(graceid, msg, tagname='em_follow')
        logger.info('Labeling {0} with DQV'.format(graceid))
        r = client.writeLabel(graceid, 'DQV')
        exit()
    elif signoffResult=='Pass':
        msg = 'Finished running human signoff checks. Candidate event passed human signoff checks.'
        r = client.writeLog(graceid, msg, tagname='em_follow')
    else:
        logger.info('No action taken due to scimon status.'.format(graceid))
        exit()

#--------------------------------------------------------------------------------------
# Begin processing
#--------------------------------------------------------------------------------------
# Instantiate the GraceDB client
# For testing purposes, this is pointed towards simdb.
# If we leave out the argument, it will default to https://gracedb.ligo.org/api/
try:
	#g = GraceDb('https://simdb.phys.uwm.edu/api/')
	g = GraceDb()
except Exception, e:
	logger.error('Connection to GraceDB failed: {0}.'.format(str(e)))
	exit()

begintime = gpstime.gps_time_now()

# Create a dictionary from the LVAlert message contents and extract its info
streamdata = str(stdin.read())
streamdata = json.loads(streamdata) #json.loads turns string into dictionary

alert_type = streamdata['alert_type']
graceid = streamdata['uid']
description = streamdata['description']
filename = streamdata['file']

# XXX For ER7 if the graceid starts with 'M' for MDCs or 'S' for Simulation, we want to ignore the event.
if re.match('M', graceid) or re.match('S', graceid):
	logger.error('Event {0} was mock data challenge or simulation. Quitting'.format(graceid))
	exit()

#--------------------------------------------------------------------------------------
# Handle labeling events
#--------------------------------------------------------------------------------------
if alert_type == 'label':
	if description == 'PE_READY':
		logger.info('Submitting Update VOEvent to GCN for event {0}.'.format(graceid))
		# Fetch the event log list from the GraceDB server
		log_dicts = g.logs(graceid).json()['log']
		for message in reversed(log_dicts):
			if 'Last skymap submitted was' in message['comment']:
				skymapinfo = re.findall(r'Last skymap submitted was (\S+) type (\S+).', message['comment'])
				skymap_filename = skymapinfo[0][0]
				skymapname = re.findall(r'(\S+).fits', skymap_filename)[0]
				skymap_type = skymapname + '-' + skymapinfo[0][1]
				skymap_image_filename = skymapname + '.png'
				process_alert(g, logger, graceid, 'update', skymap_filename, skymap_type, skymap_image_filename)
				break
	elif description == 'EM_READY':
		logger.info('Submitting Initial VOEvent to GCN for event {0}.'.format(graceid))
		# Fetch the event log list from the GraceDB server
		log_dicts = g.logs(graceid).json()['log']
		for message in log_dicts:
			if 'Last skymap submitted was' in message['comment']:
				skymapinfo = re.findall(r'Last skymap submitted was (\S+) type (\S+).', message['comment'])
				skymap_filename = skymapinfo[0][0]
				skymapname = re.findall(r'(\S+).fits', skymap_filename)[0]
				skymap_type = skymapname + '-' + skymapinfo[0][1]
				skymap_image_filename = skymapname + '.png'
				process_alert(g, logger, graceid, 'initial', skymap_filename, skymap_type, skymap_image_filename)
				break
	elif (checkLabels(hardware_inj, description.split()) > 0):
        # Check: Have we already sent out alerts on this event?
		voevent_dicts = g.voevents(graceid).json()['voevents']
		if len(voevent_dicts):
			for voevent in voevent_dicts:
				if voevent['voevent_type'] == 'RE':
					# We have already sent a retraction.
					# Thus, no action is necessary.
					exit()
			# There are existing VOEvents, but we haven't already sent a 
			# retraction, so let's do that.
			process_alert(g, logger, graceid, 'retraction')

#--------------------------------------------------------------------------------------
# Handle new candidate event
#--------------------------------------------------------------------------------------
elif alert_type == 'new':
	logger.info('Got new event {0}.'.format(graceid))
	# Get event information from streamdata
	event_dict = streamdata['object']
	far = event_dict['far']
	pipeline = event_dict['pipeline']
	labels = event_dict['labels']
	if 'search' in event_dict.keys():
		search = event_dict['search']
	else:
		search = ''
	# Calculate the FAR threshold for this event
	farthresh = get_farthresh(config, pipeline, search)

	# If FAR is above threshold, or if event is labeled INJ or DQV, do not create alert
	# Also log message saying why no alert was created
	if far >= farthresh:
		logger.info('Rejected {0} due to large FAR.'.format(graceid))
		r = g.writeLog(graceid, 'Candidate event rejected due to large FAR.', tagname = 'em_follow')
	elif checkLabels(hardware_inj, labels.keys()) > 0:
		logger.info('Ignoring new event {0} due to INJ or DQV.'.format(graceid))
		r = g.writeLog(graceid, 'Candidate event rejected due to INJ or DQV label.', tagname = 'em_follow')
	else:
		logger.info('Submitting Preliminary VOEvent to GCN for event {0}.'.format(graceid))
		process_alert(g, logger, graceid, 'preliminary')

#--------------------------------------------------------------------------------------
# Handle uploaded files
#--------------------------------------------------------------------------------------
elif alert_type=='update':
	# Since we will need information about the event itself, fetch the event dict
	try:
		event_dict = g.events(graceid).next()
	except Exception, e:
		logger.error('Could not fetch event information: {0}.'.format(str(e)))
		exit()

	far = event_dict['far']
	pipeline = event_dict['pipeline']
	if 'search' in event_dict.keys():
		search = event_dict['search']
	else:
		search = ''
	labels = event_dict['labels']
	group = event_dict['group']
	detectors = str(event_dict['instruments']).split(',')
	farthresh = get_farthresh(config, pipeline, search)

	# First check FAR and labels
	if (far >= farthresh or (checkLabels(hardware_inj, labels.keys()) > 0)):
		logger.info('Ignoring update for {0} due to INJ, DQV, or high FAR.'.format(graceid))
		exit()

	# Check whether the file in question is a skymap
	# We assume that any file with the .fits or .fits.gz extension *and* the 'sky_loc' tag will be a skymap
	# The tag names should also contain provenance information for the skymap, which could be useful here
	alert_dict = streamdata['object']

	#XXX Right now, 'sky_loc' tag does not appear under tag_names section of the alert that tips off lvalert_listen.
	#XXX Eventually change this to-- if (filename.endswith('.fits.gz') or filename.endswith('.fits')) and 'sky_loc' in tag_names:
	if (filename.endswith('.fits.gz') or filename.endswith('.fits')):
		# First, get the submitter name 
		skymap_filename = filename
		skymap_type = group + search
		r = g.writeLog(graceid, 'Last skymap submitted was {0} type {1}.'.format(skymap_filename, skymap_type))

		# If new skymaps are loaded, check if the event has passed iDQ checks by reading the log and labeling the event as either 'EM_READY' or 'PE_READY'
		#'EM_READY' is the label set if there have been no previous skymaps
		# 'PE_READY' is the label set if we've already sent out an Initial Localization VOEvent
		
		logger.info('Got skymap {0} for event {1}.'.format(filename, graceid))

		voevent_dicts = g.voevents(graceid).json()['voevents']
		if len(voevent_dicts):
			latest_voevent = voevent_dicts[-1] 
			latest_voevent_type = latest_voevent['voevent_type']
			if latest_voevent_type == 'UP': 
				skymapname = re.findall(r'(\S+).fits', skymap_filename)[0]
				skymap_image_filename = skymapname + '.png'
				process_alert(g, graceid, 'update', skymap_filename, skymap_type, skymap_image_filename)
			elif latest_voevent_type == 'IN':
				# Set label 'PE_READY' since the initial_localization alert was already created and/or sent out
				# It must already be labeled EM_READY
				logger.info('Labeling {0} with PE_READY.'.format(graceid))
				r = g.writeLabel(graceid, 'PE_READY')
			elif latest_voevent_type == 'PR':
				# XXX Note: this assumes that there has been at least a Preliminary VOEvent.
				# We want to apply the EM_READY label as long as the event passes iDQ and 	
				# human scimon checks (if necessary)
				if not checkIdqStatus(g)=='Pass':
					logger.info('No action taken on skymap for {0} due to iDQ status'.format(graceid))
					exit()

				if humanscimons=='yes':
					passesHumanSignoffsOrExit(g, logger, graceid, detectors)

				# If we're still here, we are ready to apply the EM_READY label
				logger.info('Labeling {0} with EM_READY.'.format(graceid))
				r = g.writeLabel(graceid, 'EM_READY')

	# Log comments have no files attached but could still contain iDQ information
	if len(filename)==0:
		comment = streamdata['object']['comment']
		if not re.match('minimum glitch-FAP', comment):
			exit()
		else:
			idqvalues, joint_FAP_values = getIdqAndJointFapValues(idq_pipelines, client, logger, graceid)

			if (len(idqvalues) < (len(idq_pipelines)*len(detectors))):
				logger.info('Have not gotten all the minfap values for {0} yet.'.format(graceid))
				if (min(idqvalues.values() and joint_FAP_values.values()) < idqthresh):
					r = g.writeLog(graceid, 'Finished running iDQ checks. Candidate event rejected because incomplete joint min-FAP value already less than iDQ threshold.', tagname = 'em_follow')
					logger.info('iDQ check failed. Applying DQV label to event {0}.'.format(graceid))
					r = g.writeLabel(graceid, 'DQV')
					exit()

			elif (len(idqvalues) > (len(idq_pipelines)*len(detectors))):
				logger.info('Too many minfap values in idqvalues dictionary for {0}.'.format(graceid))
			else:
				logger.info('Ready to run idq_checks for {0}.'.format(graceid))
				# First make sure that we haven't already run the checks -- we don't want to over-send alerts
				# Check log to see if we've said 'Finished running iDQ checks.'
				log_dicts = g.logs(graceid).json()['log']
				for message in log_dicts:
					if 'Finished running iDQ checks.' in message['comment']:
						exit()

				# Now that iDQ checks are finished, we want to know whether the event passed the iDQ checks or not.
				# If they don't pass the checks, we set the label 'DQV'
				# If they do pass the checks, we write a log message saying that they did
				# 'glitch-FAP' is the probability that the classifier thinks there was a glitch and *there was not a glitch*
				# 'glitch-FAP' -> 0 means high confidence there is a glitch
				# 'glitch-FAP' -> 1 means low confidence there is a glitch
				# What we want is something like the minimum of the products of FAPS from different sites computed for each classifier
				# Calculate the joint_FAP values for all the iDQ pipelines
				for pipeline in idq_pipelines:
					joint_FAP = 1
					for detector in detectors:
						detectorstring = '{0}.{1}'.format(pipeline, detector)
						joint_FAP = joint_FAP*idqvalues[detectorstring]
					joint_FAP_values[pipeline] = joint_FAP
					logger.info('Got joint_FAP = {0} for event {1} iDQ pipeline {2}.'.format(joint_FAP, graceid, pipeline))

				if min(joint_FAP_values.values()) > idqthresh:
					logger.info('Event {0} passed iDQ check.'.format(graceid))
					r = g.writeLog(graceid, 'Finished running iDQ checks. Candidate event passed iDQ checks.', tagname='em_follow')
					if humanscimons=='yes':
						passesHumanSignoffsOrExit(g, logger, graceid, detectors)

					# Check log to see if there is a skymap file or not... If so, set label 'EM_READY'
					for message in log_dicts:
						#XXX Make sure that whenever skymaps are uploaded they always log 'skymap' in the comment
						if 'skymap' in message['comment']:
							logger.info('Applying EM_READY label to event {0}.'.format(graceid))
							r = g.writeLabel(graceid, 'EM_READY')
							break
				else:
					r = g.writeLog(graceid, 'Finished running iDQ checks. Candidate event rejected due to low iDQ FAP value of {0}.'.format(joint_FAP), tagname = 'em_follow')
					logger.info('iDQ check failed. Applying DQV label to event {0}.'.format(graceid))
					r = g.writeLabel(graceid, 'DQV')

	# If the uploaded file is a human signoff file, start the human signoff check process if necessary
	if (filename.endswith('.txt') and ('signoff' in filename)):
		if humanscimons=='yes':
			passesHumanSignoffOrExit(g, logger, graceid, detectors)
		elif humanscimons!='yes':
			try:
				signofftxt = g.files(graceid, filename)
				fails = re.findall(r'Fail', signofftxt.read())
				if len(fails) > 0:
					logger.info('Event rejected by human signoff. Applying DQV label to event {0}.'.format(graceid))
					r = g.writeLog(graceid, 'Candidate event failed human signoff checks.', tagname='em_follow')
					r = g.writeLabel(graceid, 'DQV')
					exit()
				else:
					pass
			except Exception, e:
				logger.error('Could not open human signoff file for %s.' % graceid)
				exit()
			log_dicts = g.logs(graceid).json()['log']
			for message in log_dicts:
				if 'Candidate event passed iDQ checks' in message['comment']:
					for msg in log_dicts:
						if 'skymap' in msg['comment']: #XXX Make sure that whenever skymaps are uploaded they always log 'skymap' in the comment
							logger.info('Labeling {0} with EM_READY.'.format(graceid))
							r = g.writeLabel(graceid, 'EM_READY')
							break
						else:
							pass
				else: # This means that no skymap was loaded so we need to wait for the map before the EM_READY label is set
					pass

#--------------------------------------------------------------------------------------
# Handle unknown alert type
#--------------------------------------------------------------------------------------
else:
	# GraceDB gave us a strange alert type.
	logger.error('Alert type {0} unrecognized. Quitting'.format(alert_type))
	exit()

#--------------------------------------------------------------------------------------
# Wrap up
#--------------------------------------------------------------------------------------
endtime = gpstime.gps_time_now()
processtime = endtime - begintime
logger.info('Process time: {0} s'.format(processtime))
