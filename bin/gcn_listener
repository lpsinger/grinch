#!/usr/bin/python

"""
Script to manage starting, stopping, and monitoring of the 
real-time GCN listener service.
"""
__author__ = "Alex Urban <alexander.urban@ligo.org>"

# Imports.
import ConfigParser
import argparse
import sys
import os

from grinch.workflow_helper import home


# Define and parse command-line arguments.
parser = argparse.ArgumentParser(description='Management script for the real-time GCN listener service.')
parser.add_argument('command', choices=['start', 'stop', 'status'],
    help='Launch, kill or check the status of GCN listener tasks')
args = parser.parse_args()

# Read gcn_config.ini.
cp = ConfigParser.ConfigParser()
etc = home + '/opt/etc/'
cp.read( etc + 'gcn_config.ini' )

# Set file path to run directory.
rundir = cp.get('working', 'rundir')

# Switch to the working directory.
try: 
    os.chdir(rundir)
except OSError:
    sys.stderr.write( 'ERROR: Required working directory %s does not exist.' % rundir )
    sys.stderr.write( 'Building this directory now.' )
    os.mkdir(rundir)
    os.chdir(rundir)
    pass

# If run with argument 'start,' write and submit condor .sub file.
if args.command == 'start':
    contents = """\
# This is the submit file to condor for the GCN listener.

universe            = local

executable          = %s/opt/bin/pygcn_listen
getenv              = True
notification        = never
environment         = DISPLAY=localhost:10.0
accounting_group = ligo.prod.o1.cbc.grb.raven
accounting_group_user = alexander.urban

## add attribute""" % home + r"""
## condor_q -format "%s " Owner -format "%s " ClusterId -format "%s\n" gcn_listener
+GCNListen      = "gdb_processor gcn_listener"

log                 = log/gcn.$(Cluster).log 
output              = gcn_logs/gcn.$(Cluster).out
error               = log/gcn.$(Cluster).error

Queue
"""
    with open('gcnlisten.sub', 'w') as f:
        f.write(contents)
    condorargs = ['condor_submit', 'gcnlisten.sub']
    os.execlp('condor_submit', *condorargs)
    print 'I am now listening for GCN notices.'
    sys.exit()

# If run with argument 'status', print a short summary of the job to screen.
elif args.command == 'status':
    user = os.getenv("USER")
    condorargs = ['condor_q', user]
    os.execlp('condor_q', *condorargs)
    sys.exit()

# If run with argument 'stop', kill the pygcn_listen job.
elif args.command == 'stop':
    exterminate = raw_input('Are you sure?? This will kill all condor jobs for this user... [y/n] ')
    if exterminate == 'y' or exterminate == 'yes': 
        print 'Righty-ho then. Exterminate!'
        user = os.getenv("USER")
        condorargs = ['condor_rm', user]
        os.execlp('condor_rm', *condorargs)
        sys.exit()
    else:
        print 'I thought as much!'
        sys.exit()

else:
    print "ERROR: Unrecognized command line argument '%s'." % args.command
    print "       Argument must be one of {start,status,stop}."
    sys.exit(1)
